 o Need way to indicate where the install mtree manifest is located
   via lmsbwe.  Or, LMSBW_configuration associative array.
 o Allow multiple configuration files.
 o Sharing interfaces between between 'build' and 'image' modules out
   to be disallowed.  The compilers may be different, and their set of
   include directories should not intersect.
 o Add new target which reports on build space used per component
 o Provide module.makefile a mechanism to select a toolchain, and to
   get it installed.
 o document that module.makefile is run in the directory where the
   configuration file is stored.
 o If debugging enabled, module.make should warn on undefined
   variables.
 o Could Make command line options in lmsbw_expand_build_module() be
   put into a text file in the build directory and included by
   module.makefile?
 o Need to be able to specify include directories in the install
   directory so that modules can use them.  Or, should this be in the
   module Makefile?
 o Need to be able to specify an API to be exported from a module.
   This API will be checked in the install directory during building
   of dependent modules; if they are different, then rebuild
   dependents after cleaning them.
 o Need toolchain capability.  What about Windows toolchains?  A
   component field 'toolchain' can be set.  If not set, the host
   toolchain will be used.  If set, it indicates the toolchain
   configuration to use.  The toolchain can be built, or simply
   installed.
 o Add lmsbw_ prefix to module functions
 o document declare_source_module
 o document declare_component_install_target
 o document declare_component_build_target
 o document declare_component_api
 o document each file of LMSBW_<component>
 o document LMSBW_<component>[source-api]
 o document LMSBW_<component>[binary-api]
 o document LMSBW_<component>[changed-api]
 o declare_source_module checks for mutual module dependence, but does
   not check for cycles.  a->b->c->a.
 o Make a target which will make a report of indirect dependents.
   a -> b -> c.  c is indirectly dependent on a.
 o When indirect dependencies code is written, update
   lmsbw_api_changed_failure to incorporate it.
 o Add 'indirect-dependencies' list to LMSBW_<component>
 o Make module rules file & building dependent on the configuration file.
 o Document all errors
 o Need document on adding a new 'kind' of module.
 o Need to have a source API & a binary API.  Changes to the binary
   API will cause dependent modules to be rebuilt w/o clean.  The
   binary API is for static linking.
 o Document binary API.
 o Test source API changes.
 o Test binary API changes.
 o Must be able to ignore binary-api or source-api changes for
   dependent modules.  Some might be dependent one or the other, but
   not both.
 o Add component field which is a list of binary output.
 o Add 'gdb' verb to load a component's binary output in gdb.
