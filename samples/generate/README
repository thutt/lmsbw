This sample will create an entire source tree with recursive
Makefiles, and LMSBW configuration files, all so you can actually test
the difference between recursive Makefiles, and the LMSBW system.

Follow these steps to use it.

o Execute the 'run-generate' script in the sample directory

  This script will generate a source directory tree in /tmp/generate
  with 90955 source files.

o Decide desired level of parallelization.  Choose an integer which
  will suit your hardware.

    export PARALLEL=4

o Time make-based build system

  + Build the system using Make, and note the number of seconds it
    takes to build the entire system.

      cd /tmp/generate
      time -p make -j ${PARALLEL}

    On the system used for testing, a 4-way parallel build of the
    default configuration takes about 17 minutes.

  + Build it again to exercise the NULL-build:

      time -p make -j ${PARALLEL}

    On the test system, this take 1.88 seconds.

  + Perform an incremental build

      The generated makefile system does not have proper dependencies,
      so instead of simply modifying a source file, you'll have to
      remove an executable.

        /tmp/generate/d15/d12/d3/s50
        rm /tmp/generate/d15/d12/d3/s50
        /tmp/generate/d15/d12/d3/s50
        time -p make -j ${PARALLEL}

      On the test machine, this takes 1.90 seconds.

  + Perform a non-parallel incremental build

      Repeat the incremental build steps, but this time with a '-j' setting of 1.

        /tmp/generate/d15/d12/d3/s50
        rm /tmp/generate/d15/d12/d3/s50
        /tmp/generate/d15/d12/d3/s50
        time -p make -j 1

      On the test machine, this takes 12.98 seconds.

  + Clean everything up

      time -p make -j ${PARALLEL} clean

o Use LMSBW

  + Make sure you have executed the 'clean' target

    The Make-based build system leaves its output in the source
    directories.  You must execute the 'clean' target to ensure that
    lmsbw isn't presented with files it does not need.

      lmsbw                                        \
        --time                                     \
        --configuration /tmp/generate/generate.cfg \
        --build-root /tmp/generate-output          \
        --parallel ${PARALLEL}

    On the test machine, this takes 18:26.

  + Build it again to exercise the NULL-build:

      lmsbw                                        \
        --time                                     \
        --configuration /tmp/generate/generate.cfg \
        --build-root /tmp/generate-output          \
        --parallel ${PARALLEL}

    On the test machine, this takes 0.80 seconds.

  + Perform an incremental build

      touch /tmp/generate/d15/d12/d3/s50.c
      lmsbw                                        \
        --time                                     \
        --configuration /tmp/generate/generate.cfg \
        --build-root /tmp/generate-output          \
        --parallel ${PARALLEL}

    On the test machine, this takes about 1 second.

  + Perform a non-parallel incremental build

      <touch some random source file in the directory hierarchy>
      lmsbw                                        \
        --time                                     \
        --configuration /tmp/generate/generate.cfg \
        --build-root /tmp/generate-output          \
        --parallel 1

    On the test machine, this takes 4.10 seconds.

  + Clean everything up

      rm -rf /tmp/generate-output

Here are the things you should observe:

  1. The full build with LMSBW should be just about the same time as
     the full build for Make.

  2. The parallel NULL build for LMSBW should be significantly faster
     than the parallel Make version.

  3. The parallel incremental build for LMSBW may be slightly slower
     than the Make version (but is usually not).

     Since the 'generate' program randomly creates a directory
     structure, it may turn out that the parallel Make can begin
     processing all directories at the same time.  If this is the
     case, it is possible for the Make-based version to barely
     outperform lmsbw.

     On a larger project, with real Makefiles, not the sample
     makefiles created by 'generate', this is unlikely to occur.

     Comparing the non-parallel incremental build to the parallel
     version will strikingly show the benefit of not recursing into
     subdirectories if no files have changed.

     LMSBW is written to not process component directories if nothing
     has been changed, while Make must recurse through each
     subdirectory and perform all dependency analysis; dramatic time
     saving can be had if you don't even recurse into subdirectories.
