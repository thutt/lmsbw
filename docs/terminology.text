
o module

  A 'module' is an entity, normally a source directory or downloaded
  tarball, which is included in the build.

  A 'module' might be 'bash-4.1.5' (which would likely be a downloaded
  tarball) or 'hello-world' (which would likely be a local source
  directory).

  Each 'module' produces a 'component'.

  It is the responsibility of the person creating the build wrapper to
  concoct module names.

  A module name must be an identifier which can be used as a Gnu Make
  identifier.

o component

  A 'component' is the result of building a 'module'.  In a single
  wrapped build, each 'component' must be unique; in other words, two
  different 'modules' cannot produce the same 'component'.

  The 'component' is used to specify prerequisites.  For example,
  'bash-4.1.5' could depend on the component 'readline'.  This
  dependency would ensure two things: 1) a 'module' in the wrapped
  build produces 'readline' and 2) 'readline' is built & installed
  before 'bash-4.1.5' is built.

  The module 'bash-4.1.5' could use 'bash' as a component name.
  Equally, 'bash-4.1.6' could also use 'bash' as a component name, but
  both 'bash-4.1.5' and 'bash-4.1.6' could not be included at the same
  time.

  If you need to include both 'bash-4.1.5' and 'bash-4.1.6' in the
  wrapped build, they must produce different components.  Consider
  that 'bash-4.1.6' is the canonical bash and that 'bash-4.1.5' is
  included for legacy support.  In this case, you could have
  'bash-4.1.5' could produce 'bash-4.1.5' and 'bash-4.1.6' produce
  'bash'.  Of course, it is your responsibility to ensure that each
  module is configured to not conflict with the other when they are
  installed.

  A component name must be an identifier which can be used as a Gnu
  Make identifier.

