#!/bin/bash
#
# Copyright (c) 2012 Taylor Hutt, Logic Magicians Software
#
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
__include_file="$(dirname ${0})/lmsbw-common"
[ -r "${__include_file}" ] || {                         \
    echo "${0}: '${__include_file}', does not exist.";  \
    exit -1;                                            \
}
source "${__include_file}";

declare -A nodes;

# LMSBW_SCRIPT_DIRECTORY should be used as a direct path to any script
# which is used from the scripts directory.
#
export LMSBW_SCRIPT_DIRECTORY="$(dirname ${program})";

function display_help ()
{
    cat <<EOF
${program} \\
   [--help | --verbose  |               \\
    --graphi <pathname> |
   ]...

  Builds produces a graph from a prerequisite or dependency report.

  --help | -h                     : Show this help and exit
  --graph                         : Specify the output filename
  --highlight-node                : Name of node to highlight
  --verbose                       : Enable more verbosity from build

EOF
}


function prolog ()
{
    cat >"${graph_output}" <<EOF
/*  xvcg -psoutput <psfile> <thisfile>
 *  gimp <psfile>
 *    save as a jpg file.
 */

graph: {
    layoutalgorithm: dfs
    finetuning: yes
    display_edge_labels: yes
    orientation: left_to_right
    port_sharing: no
    manhattan_edges: no
    smanhattan_edges: no
    splines: yes
    priority_phase: yes
    xspace: 40
    yspace: 50

EOF
}

function epilog ()
{
    cat >>"${graph_output}" <<EOF
}

EOF
}

# highlighted <node-name>
#
# Returns '1' if highlighted, 0 otherwise
#
function highlighted
{
    local node=${1};
    [ "${node}" = "${highlight_node}" ];
}

# make_edge <source-node> <destination-node>
function make_edge ()
{
    local src=${1};
    local dst=${2};
    local color;

    if highlighted "${src}" ; then
        color="color: green";
    elif highlighted "${dst}"; then
        color="color: red";
    fi;

    cat >>${graph_output} <<EOF
edge: {
   thickness: 3
   sourcename: "${dst}"
   targetname: "${src}"
   ${color}
}

EOF
}


# make_node <node-name>
function make_node ()
{
    local node_name="${1}";
    local color;

    color="color: white";
    if highlighted ${node_name} ; then
        color="color: yellow";
    fi;

    cat >>${graph_output} <<EOF
node: {
   title: "${node_name}"
   label: "${node_name}"
   shape: box
   ${color}
}

EOF
}

# add_edge <start-node> <destination-node>
#
function add_edge ()
{
   # echo "${1} <- ${2}";
    if [ -z "${nodes[${2}]}" ] ; then
        nodes[${2}]=" ";         # add new terminal node
    fi;
    nodes[${1}]="${nodes[${1}]}:${2}";
}

function main ()
{
    local lmsbw_error_file="/tmp/lmsbw-errors.${BASHPID}";
    local makeopts;
    local debug;

    args=$(getopt -o h                          \
        --long help                             \
        --long graph:                           \
        --long highlight-node:                  \
        --long verbose                          \
        -n "${program}"                         \
        -- "$@");


    if [ $? != 0 ] ; then
        fatal "${program}: Failed to canonicalize command line argument."
    fi;

    # Reset positional arguments to ${args}.
    eval set -- "$args"

    while true ; do
        case "$1" in
            -h|--help)
                display_help;
                exit 0 ;;

            --verbose)
                export LMSBW_VERBOSE=1
                shift 1 ;;

            --graph)
                graph_output="$(readlink -f ${2})";
                shift 2 ;;

            --highlight-node)
                highlight_node="${2}";
                shift 2 ;;

            --) shift ;
                break ;;

            *) echo "Internal error: ${1}!" ;
                argument_failure="yes" ;
        esac
    done

    if [ -z "${graph_output}" ] ; then
        fatal "An output file must be named with '--graph'";
    fi;

    prolog;
    while read line ; do
        local key=$(echo "${line}"|cut -d ':' -f 1);
        local value=$(echo "${line}"|cut -d ':' -f 2);
        for e in ${value} ; do
            add_edge ${key} ${e};
        done;
    done;

    # Create all nodes & edges
    for n in ${!nodes[@]}; do
        make_node ${n};
        for e in $(echo ${nodes[${n}]}|tr ':' ' '); do
            make_edge ${n} ${e};
        done;
    done;

    epilog;
}

main ${@};
