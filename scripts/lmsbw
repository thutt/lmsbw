#!/bin/bash
#
# Copyright (c) 2012 Taylor Hutt, Logic Magicians Software
#
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
__include_file="$(dirname ${0})/lmsbw-common"
[ -r "${__include_file}" ] || {                         \
    echo "${0}: '${__include_file}', does not exist.";  \
    exit -1;                                            \
}
source "${__include_file}";

# LMSBW_SCRIPT_DIRECTORY should be used as a direct path to any script
# which is used from the scripts directory.
#
export LMSBW_SCRIPT_DIRECTORY="$(dirname ${program})";

function display_help ()
{
    cat <<EOF
${program} \\
   [--help | --verbose  |               \\
    --build-root <pathname> |           \\
    --configuration <pathname> |        \\
    --disable-build-output-download |   \\
    --no-download <component> |         \\
    --parallel <integer> |              \\
    --prerequisite-check <component> |  \\
    --progress | --time |               \\
    --toolchains-root <pathname> |      \\
    --toolchain <name>]...              \\
    -- [Gnu Make options]...

  Builds a set of software based on a configuration file by wrapping
  traditional recursive Makefiles.  Incremental builds are much faster
  than a traditional recursive make.

  To see the available targets: lmsbw targets
  To see available components : lmsbw components

  --help | -h                     : Show this help and exit
  --build-root                    : Specify LMSBW_BUILD_ROOT
  --configuration                 : Full path to LMSBW configuration file
  --disable-build-output-download : Disables downloading build output
  --no-download                   : Set component to build instead of download
  --parallel                      : Specify LMSBW_PARALLEL_LEVEL (-j to Make)
  --prerequisite-check            : Check component prerequisite correctness
  --progress                      : Produce more progress messages during build
  --time                          : Show elapsed time for component builds
  --toolchain                     : Specify LMSBW_TOOLCHAIN
  --toolchains-root               : Specify LMSBW_TOOLCHAINS_ROOT
  --verbose                       : Enable more verbosity from build

EOF
}

function add_lmsbw_env ()
{
    local new_var="${1}";
    lmsbw_env="${lmsbw_env} ${new_var}='${!new_var}'";
}

# Generate a string which represents all the LMSBW environment variables.
function generate_lmsbw_env ()
{
    lmsbw_env="";
    add_lmsbw_env LMSBW_VERBOSE;
    add_lmsbw_env LMSBW_BUILD_ROOT;
    add_lmsbw_env LMSBW_CONFIGURATION_FILE;
    add_lmsbw_env LMSBW_DEBUG;
    add_lmsbw_env LMSBW_DISABLE_BUILD_OUTPUT_DOWNLOAD;
    add_lmsbw_env LMSBW_BUILD_OUTPUT_NO_DOWNLOAD;
    add_lmsbw_env LMSBW_PARALLEL_LEVEL;
    add_lmsbw_env LMSBW_PROGRESS;
    add_lmsbw_env LMSBW_ELAPSED_TIME;
    add_lmsbw_env LMSBW_TOOLCHAIN;
    add_lmsbw_env LMSBW_TOOLCHAINS_ROOT;
}

function main ()
{
    local lmsbw_error_file="/tmp/lmsbw-errors.${BASHPID}";
    local makeopts;
    local debug;
    
    args=$(getopt -o h                          \
        --long help                             \
        --long build-root:                      \
        --long configuration:                   \
        --long debug                            \
        --long disable-build-output-download    \
        --long no-download:                     \
        --long parallel:                        \
        --long prerequisite-check:              \
        --long progress                         \
        --long toolchain:                       \
        --long toolchains-root:                 \
        --long time                             \
        --long verbose                          \
        -n "${program}"                         \
        -- "$@");


    if [ $? != 0 ] ; then
        fatal "${program}: Failed to canonicalize command line argument."
    fi;

    # Reset positional arguments to ${args}.
    eval set -- "$args"

    while true ; do
        case "$1" in
            -h|--help)
                display_help;
                exit 0 ;;

            --verbose)
                export LMSBW_VERBOSE=1
                shift 1 ;;

            --build-root)
                export LMSBW_BUILD_ROOT="$(readlink -f ${2})";
                shift 2 ;;

            --configuration)
                export LMSBW_CONFIGURATION_FILE="$(readlink -f ${2})";
                shift 2 ;;

            --debug)
                export LMSBW_DEBUG=1
                debug="--warn-undefined-variables";
                shift 1 ;;

            --disable-build-output-download)
                export LMSBW_DISABLE_BUILD_OUTPUT_DOWNLOAD="yes";
                shift 1 ;;

            --no-download)
                export LMSBW_BUILD_OUTPUT_NO_DOWNLOAD="${2} ${LMSBW_BUILD_OUTPUT_NO_DOWNLOAD}";
                shift 2 ;;

            --parallel)
                export LMSBW_PARALLEL_LEVEL="${2}";
                shift 2 ;;

            --prerequisite-check)
                export LMSBW_PREREQUISITE_CHECK_COMPONENT="${2}";
                shift 2 ;;

            --progress)
                export LMSBW_PROGRESS=1
                shift 1 ;;

            --time)
                export LMSBW_ELAPSED_TIME=1
                shift 1 ;;

            --toolchain)
                export LMSBW_TOOLCHAIN="${2}";
                shift 2 ;;

            --toolchains-root)
                export LMSBW_TOOLCHAINS_ROOT="$(readlink -f ${2})";
                shift 2 ;;

            --) shift ;
                break ;;

            *) echo "Internal error: ${1}!" ;
                argument_failure="yes" ;
        esac
    done

    # When downloading build output is disabled, '--no-download' is
    # meaningless.
    #
    # Removing it here maintains the invariant that it is only set
    # when they valid.
    if [ ! -z "${LMSBW_DISABLE_BUILD_OUTPUT_DOWNLOAD}" ] ; then
        unset LMSBW_BUILD_OUTPUT_NO_DOWNLOAD;
    fi;

    # Not intialized at decl so that LMSBW_PARALLEL_LEVEL is not left
    # empty (because LMSBW_PARALLEL_LEVEL will not have been
    # processed).
    makeopts="-j ${LMSBW_PARALLEL_LEVEL:-1} --no-print-directory";

    if [ -z "${LMSBW_BUILD_ROOT}" ] ; then
        fatal "${program}: Build output directory not specified; use '--build-root'.";
    fi;

    # If a toolchain has been specified, then --toolchain-root must
    # have been specified.  Without the '--toolchain-root'
    # specification, the actual toolchain directory cannot be
    # location.
    #
    if [ ! -z "${LMSBW_TOOLCHAIN}" ] && [ -z "${LMSBW_TOOLCHAINS_ROOT}" ] ; then
        fatal "'--toolchain' requires '--toolchains-root' to be specified.";
    fi;

    start_seconds=$(date +%s)
    build_system_dir=$(readlink -f $(dirname ${0})/..);
    makefile=${build_system_dir}/wrapper/Makefile
    cmd="make ${makeopts} ${debug} -f ${makefile} ${@}";

    generate_lmsbw_env;
    if [ ! -z "${LMSBW_VERBOSE}" ] ; then
        echo "${lmsbw_env} ${cmd}";
    fi;
    success="yes";
    ${cmd} 2>"${lmsbw_error_file}" || unset success;
    end_seconds=$(date +%s)

    # When using the 'seconds since epoch' notation (@), the time
    # printed will be in the local time zone.  We need to normalize
    # the 'HH:MM:SS' display to be based at GMT.  This is done by
    # subtracting the numnber of hours offset from GMT for the local
    # time ('%z').
    #
    elapsed_seconds=$((${end_seconds} - ${start_seconds}));
    elapsed_time=$(date -u -d "1970-01-01 ${elapsed_seconds} seconds" +"%H:%M:%S");
    if [ ! -z "${LMSBW_ELAPSED_TIME}" ] ; then
        echo -e  "\n++++ Build time: ${elapsed_time}  (seconds: ${elapsed_seconds})";
    fi;

    if [ -z "${success}" ] ; then
        echo -e "\n*****\n***** Failed; component failures:\n*****\n";
        cat "${lmsbw_error_file}";
        echo -e "\n";
    fi;

    if [ -e "${lmsbw_error_file}" ] ; then
        rm -f "${lmsbw_error_file}";
    fi;

    [ ! -z "${success}" ] ;
}

main ${@};
