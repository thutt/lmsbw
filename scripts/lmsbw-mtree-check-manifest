#!/bin/bash
#
# Copyright (c) 2012, 2013 Taylor Hutt, Logic Magicians Software
#
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# This uses mtree to check a manifest against a provided directory
# tree.
#
# It returns 0 if directory tree is the same as the manifest, and
# non-zero if the directory tree differs at all from the manifest.
#
# It is used to guard the execution of commands using the contents of
# the directory.  If the directory contents have not been changed, the
# guarded statements will not be executed.
#
# An example use is this:
#
#   If nothing has been modified in a source subdirectory of a
#   component, there is no reason to invoke the component's build
#   process to do a NULL build.
#
__include_file="$(dirname ${0})/lmsbw-common"
[ -r "${__include_file}" ] || {                         \
    echo "${0}: '${__include_file}', does not exist.";  \
    exit -1;                                            \
}
source "${__include_file}";

function display_help ()
{
    cat <<EOF
${program}: Generates a manifest for a directory tree

  --help | -h                  : Show this help and exit
  --verbose                    : Enable more verbosity
  --mtree <path to mtree>      : Pathname of mtree executable
  --component <component name> : Name of the component [optional]
  --directory-tree <directory> : Tree on which mtree should be executed
  --manifest <pathname>        : The pathname of the produced manifest


Returns zero if the manifest has not changed.
Returns non-zero if the manifest has chagned.

EOF
}


function main ()
{
    local argument_failure;
    local directory_tree;
    local component;
    local mtree;
    local manifest
    local verbose;

    args=$(getopt -o h                          \
        --long help                             \
        --long component:                       \
        --long directory-tree:                  \
        --long manifest:                        \
        --long mtree:                           \
        --long verbose                          \
        -n "${program}"                         \
        -- "$@");

    if [ $? != 0 ] ; then
        fatal "${program}: Failed to canonicalize command line argument."
    fi;

    # Reset positional arguments to ${args}.
    eval set -- "$args"

    while true ; do
        case "$1" in
            -h|--help)
                display_help;
                exit 0 ;;

            --directory-tree)
                directory_tree="${2}";
                shift 2 ;;

            --component)
                component="${2}";
                shift 2 ;;

            --manifest)
                manifest="${2}";
                shift 2 ;;

            --mtree)
                mtree="${2}";
                shift 2 ;;

            --verbose)
                verbose="1";
                shift 1 ;;

            --) shift ;
                break ;;

            *) echo "Internal error: ${1}!" ;
                argument_failure="yes" ;
        esac
    done

    if ! which mtree ; then
        if [ ! -x "${mtree}" ] || [ -z "${mtree}" ] ; then
            fatal \
                "${program}: '--mtree' argument, '${mtree}', is not the pathname of the mtree executable";
        fi;
    fi;

    if [ -z "${directory_tree}" ] ; then
        fatal "${program} --directory-tree must specify the tree to check.";
    elif [ ! -d "${directory_tree}" ] ; then
        fatal "${program}: --directory-tree value, '${directory_tree}' is not a directory.";
    fi;

    if [ -f "${manifest}" ] ; then
        verbosity "'${manifest}' exists";
        # mtree does not treat deletions from the manifest as an
        # error.  Rather, it outputs 'missing' on stdout.
        #
        # If only files are missing, then the exit code is 0.
        #
        # If files are missing from the manifest, this script should
        # return a non-zero exit code to indicate that the component
        # must be rebuilt.
        #

        stdout=$("${mtree}" -f "${manifest}" -p "${directory_tree}");
        mtree_exit_code=$?;

        if [ ${mtree_exit_code} -ne 0 ] ; then
            exit 1;
        else
            # Check if any files were deleted.
            #
            # The output format of mtree is
            #
            #   a.c missing
            #
            # If 'missing' is found on stdout, even if it's part of a
            # filename, the component build process will be executed.
            #
            # Another script that is used pre-syncing of the component
            # sources to the component build directory handles the
            # situation when files have been removed from the source
            # directory.
            #
            exit ! echo ${stdout}|grep -q "^missing$";
        fi;
    else
        verbosity "'${manifest}' does not exist";
        exit 1;                 # component is not built & must be built
    fi;
}

main "$@";
