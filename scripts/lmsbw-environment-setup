#!/bin/bash
#
# Copyright (c) 2012 Taylor Hutt, Logic Magicians Software
# 
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#  'BW_' prefix is used for things set in the environment by the user.
#  'LMSBW_' prefix is used for things derived or generated by the
#  build system.
#
program="lmsbw-environment-setup";

function set_build_root ()
{
    local br=${1};              # BW_BUILD_ROOT
    local sr=${2};              # BW_SOURCE_ROOT

    export LMSBW_BUILD_ROOT="${br}${sr}";
}

function check_environment ()
{
    if [ -z "${BW_TARBALL_REPOSITORY}" ] ; then
        echo -e "\n**** BW_TARBALL_REPOSITORY is not set."
        echo -e "**** Use '--tarball-repository'."
    fi;

    if [ ! -z "${BW_SOURCE_ROOT}" ] ; then
        if [ ! -z "${BW_BUILD_ROOT}" ] ; then
            # All attributes related to the build are used to
            # construct the build output directory.  This ensures that
            # every build remains entirely separate.
            set_build_root                              \
                "${BW_BUILD_ROOT}"                      \
                "$(readlink -f ${BW_SOURCE_ROOT})";
        else
            echo -e "\n***** --build-root has not been specified.";
            echo -e "\n***** Unable to construct 'LMSBW_BUILD_ROOT'";
        fi;
    else
        echo -e "\n***** --source-root has not been specified."
        echo -e "\n***** Unable to construct 'LMSBW_BUILD_ROOT'";
        false;
    fi;
}

function display_environment ()
{
    cat <<EOF

BW_BUILD_ROOT              : '${BW_BUILD_ROOT}'

BW_SOURCE_ROOT             : '${BW_SOURCE_ROOT}'
LMSBW_BUILD_ROOT           : '${LMSBW_BUILD_ROOT}'
BW_TARBALL_REPOSITORY      : '${BW_TARBALL_REPOSITORY}'
BW_PARALLEL_LEVEL          : '${BW_PARALLEL_LEVEL:-<not specified>}'
EOF
}

function export_variables ()
{
    cat >${1} <<EOF
export BW_BUILD_ROOT="${BW_BUILD_ROOT}";
export BW_SOURCE_ROOT="${BW_SOURCE_ROOT}";
export LMSBW_BUILD_ROOT="${LMSBW_BUILD_ROOT}";
export BW_TARBALL_REPOSITORY="${BW_TARBALL_REPOSITORY}";
export BW_PARALLEL_LEVEL="${BW_PARALLEL_LEVEL}";
EOF
}

function import_variables ()
{
    if [ -e "${1}" ] ; then
        source ${1};
    else
        echo "Settings file, '${1}', does not exist."
    fi;
}

function display_help ()
{
    cat <<EOF
${program}: Set build process environment variables.

  --build-root <pathname>     : Set BW_BUILD_ROOT, and LMSBW_BUILD_ROOT.
  --source-root <pathname>    : Set BW_SOURCE_ROOT
  --export <pathname>         : Export variables to pathname
  --help | -h                 : Show this help and exit
  --import <pathname>         : Import variables from pathname
  --parallel                  : Set BW_PARALLEL_LEVEL, used for 'Make -j'
  --show                      : Show all current values.

This script should only be used with 'source'; never execute directly.

EOF
}

function main ()
{
    local help;
    local show_environment;
    local export_data;
    local import_data;

    args=$(getopt -o h                          \
        --long build-root:                      \
        --long export:                          \
        --long help                             \
        --long import:                          \
        --long parallel:                        \
        --long show                             \
        --long source-root:                     \
        --long tarball-repository:              \
        -n "${program}"                         \
        -- "$@");

    if [ $? != 0 ] ; then
        echo "Failed to canonicalize command line argument."
        false;
        return;
    fi;

    # Reset positional arguments to ${args}.
    eval set -- "$args"

    while true ; do
        case "$1" in
            --build-root)
                export BW_BUILD_ROOT="${2}";
                shift 2 ;;

            --export)
                export_data="${2}";
                shift 2 ;;

            -h|--help)
                help="yes";
                shift 1 ;;

            --import)
                import_data="${2}";
                shift 2 ;;

            --parallel)
                export BW_PARALLEL_LEVEL="${2}";
                shift 2 ;;

            --show)
                show_environment="yes";
                shift 1 ;;

            --source-root)
                BW_SOURCE_ROOT="${2}";
                shift 2 ;;

            --tarball-repository)
                export BW_TARBALL_REPOSITORY="${2}";
                shift 2 ;;

            --) shift ;
                break ;;

            *) echo "Internal error: ${1}!" ;
                false;
                return ;;
        esac
    done

    if [ ! -z "${help}" ] ; then
        display_help;
        return;
    fi;

    if [ ! -z "${export_data}" -o ! -z "${import_data}" ] ; then
        if [ ! -z "${export_data}" -o -z "${import_data}" ] ; then
            export_variables ${export_data};
        elif [ -z "${export_data}" -o ! -z "${import_data}" ] ; then
            import_variables ${import_data};
        else
            echo "Cannot import & export at the same time";
            false;
            return;
        fi;
    fi;

    check_environment;

    if [ ! -z "${show_environment}" ] ; then
        display_environment;
    fi;
}

main "$@";
